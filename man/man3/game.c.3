.TH "logic/game.c" 3 "Sat Mar 22 2025 15:19:14" "Version 1.0.0" "TikTakToe" \" -*- nroff -*-
.ad l
.nh
.SH NAME
logic/game.c \- Implements the core game logic for Tic-Tac-Toe\&.  

.SH SYNOPSIS
.br
.PP
\fR#include 'logic/game\&.h'\fP
.br
\fR#include 'config\&.h'\fP
.br
\fR#include 'hal/nvic\&.h'\fP
.br
\fR#include 'hal/random\&.h'\fP
.br
\fR#include 'hal/timer\&.h'\fP
.br
\fR#include 'logic/bot\&.h'\fP
.br
\fR#include 'logic/input\&.h'\fP
.br
\fR#include 'logic/time\&.h'\fP
.br
\fR#include 'logic/winning\&.h'\fP
.br
\fR#include 'presentation/cell\&.h'\fP
.br
\fR#include 'presentation/field\&.h'\fP
.br
\fR#include 'presentation/menu\&.h'\fP
.br
\fR#include 'presentation/print\&.h'\fP
.br
\fR#include 'presentation/style\&.h'\fP
.br
\fR#include 'presentation/ui\&.h'\fP
.br
\fR#include 'util/input_buf\&.h'\fP
.br
\fR#include 'util/math\&.h'\fP
.br
\fR#include <stdint\&.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "static void \fBinit\fP (\fBMode\fP mode)"
.br
.RI "Initializes relevant things at the game start\&. "
.ti -1c
.RI "static void \fBhandleForcedMoveUpdate\fP ()"
.br
.RI "Handles the presentation update, when a move is forced due to timeout\&. "
.ti -1c
.RI "static void \fBredrawField\fP ()"
.br
.RI "Refreshes the whole UI\&. "
.ti -1c
.RI "static void \fBcalculateSummary\fP ()"
.br
.RI "Calculates game summary statistics\&. "
.ti -1c
.RI "static \fBPlayer\fP \fBstartingPlayer\fP ()"
.br
.RI "Randomly determines the starting player\&. "
.ti -1c
.RI "void \fBgame_run\fP (const \fBMode\fP mode)"
.br
.RI "Start the main game\&. "
.ti -1c
.RI "void \fBgame_onTimeOut\fP ()"
.br
.RI "Automatically end a turn in case the turn time is over\&. "
.ti -1c
.RI "void \fBgame_endTurn\fP ()"
.br
.RI "Finish the current turn\&. "
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "volatile \fBbool\fP \fBforce_ui_update\fP = \fBfalse\fP"
.br
.RI "Force an update of the UI\&. "
.ti -1c
.RI "static \fBGameState\fP \fBgame_state\fP"
.br
.RI "\fBGameState\fP of the current game\&. "
.ti -1c
.RI "static \fBCellState\fP \fBcell_state\fP"
.br
.RI "\fBCellState\fP of the current game\&. "
.in -1c
.SH "Detailed Description"
.PP 
Implements the core game logic for Tic-Tac-Toe\&. 


.PP
\fBSee also\fP
.RS 4
\fBgame\&.h\fP
.RE
.PP
\fBCopyright\fP
.RS 4
This Source Code Form is subject to the terms of the Mozilla Public License, v2\&.0\&. If a copy of the MPL was not distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/\&. 
.RE
.PP

.PP
Definition in file \fBgame\&.c\fP\&.
.SH "Function Documentation"
.PP 
.SS "static void calculateSummary ()\fR [static]\fP"

.PP
Calculates game summary statistics\&. Computes total and average ticks for each player and the game overall\&.

.PP
\fBNote\fP
.RS 4
Statistics are written to the game_state struct\&. 
.RE
.PP
\fBSee also\fP
.RS 4
\fBgame_state\fP 
.RE
.PP

.PP
Definition at line \fB246\fP of file \fBgame\&.c\fP\&.
.PP
References \fBGameState::average_ticks\fP, \fBCircle\fP, \fBGameState::circle_average_ticks\fP, \fBGameState::circle_total_ticks\fP, \fBCross\fP, \fBGameState::cross_average_ticks\fP, \fBGameState::cross_total_ticks\fP, \fBg_timer\fP, \fBgame_state\fP, \fBGameState::mode\fP, \fBPVE\fP, \fBGameState::round\fP, \fBGameTimer::ticks_total\fP, \fBGameState::total_ticks\fP, and \fBGameState::winner\fP\&.
.SS "void game_endTurn ()"

.PP
Finish the current turn\&. Updates the game state and switches to the next player or round\&. 
.PP
Definition at line \fB169\fP of file \fBgame\&.c\fP\&.
.PP
References \fBcell_state\fP, \fBCircle\fP, \fBCross\fP, \fBGameState::current_player\fP, \fBGameState::fields_marked\fP, \fBgame_state\fP, \fBCellState::last_circle\fP, \fBCellState::last_cross\fP, \fBGameState::mode\fP, \fBPVE\fP, \fBGameState::round\fP, \fBCellState::selected\fP, and \fBtime_finishTurn()\fP\&.
.SS "void game_onTimeOut ()"

.PP
Automatically end a turn in case the turn time is over\&. 
.PP
\fBSee also\fP
.RS 4
\fBtime_onInterrupt\fP 
.RE
.PP

.PP
Definition at line \fB149\fP of file \fBgame\&.c\fP\&.
.PP
References \fBCellState::all\fP, \fBbot_markRandomCell()\fP, \fBcell_state\fP, \fBCircle\fP, \fBCross\fP, \fBGameState::current_player\fP, \fBforce_ui_update\fP, \fBgame_endTurn()\fP, \fBgame_state\fP, \fBCellState::last_circle\fP, \fBCellState::last_cross\fP, \fBGameState::mode\fP, and \fBPVE\fP\&.
.SS "void game_run (const \fBMode\fP mode)"

.PP
Start the main game\&. Initializes the game and enters the main game loop\&.

.PP
\fBParameters\fP
.RS 4
\fImode\fP Which mode the game should be played in\&. 
.RE
.PP

.PP
Definition at line \fB82\fP of file \fBgame\&.c\fP\&.
.PP
References \fB__WFI\fP, \fBCellState::all\fP, \fBBOLD\fP, \fBbot_markRandomCell()\fP, \fBcalculateSummary()\fP, \fBcell_redraw_withModifier()\fP, \fBcell_redrawAll()\fP, \fBcell_select()\fP, \fBcell_state\fP, \fBCELLS_PER_COL\fP, \fBCELLS_PER_ROW\fP, \fBCircle\fP, \fBCross\fP, \fBGameState::current_player\fP, \fBGameState::fields_marked\fP, \fBforce_ui_update\fP, \fBg_input_buf\fP, \fBg_timer\fP, \fBgame_state\fP, \fBhandleForcedMoveUpdate()\fP, \fBinit()\fP, \fBinput_getNext()\fP, \fBinput_handleByte()\fP, \fBGameTimer::is_running\fP, \fBCellState::last_circle\fP, \fBmax\fP, \fBmenu_showGameOver()\fP, \fBGameState::mode\fP, \fBNone\fP, \fBPVE\fP, \fBredrawField()\fP, \fBREMAINING_TIME\fP, \fBGameState::round\fP, \fBCellState::selected\fP, \fBTICKS_PER_TURN\fP, \fBTIMER0\fP, \fBtimer_stop()\fP, \fBui_updateTimer()\fP, \fBui_updateTurn()\fP, \fBGameState::winner\fP, and \fBwinning_checkForWinner()\fP\&.
.SS "static void handleForcedMoveUpdate ()\fR [static]\fP"

.PP
Handles the presentation update, when a move is forced due to timeout\&. 
.PP
Definition at line \fB286\fP of file \fBgame\&.c\fP\&.
.PP
References \fBCellState::all\fP, \fBcell_select()\fP, \fBcell_state\fP, \fBCircle\fP, \fBGameState::current_player\fP, \fBgame_state\fP, \fBCellState::last_circle\fP, \fBCellState::last_cross\fP, \fBGameState::mode\fP, \fBPVE\fP, \fBGameState::round\fP, \fBCellState::selected\fP, and \fBui_updateTurn()\fP\&.
.SS "static void init (\fBMode\fP mode)\fR [static]\fP"

.PP
Initializes relevant things at the game start\&. Sets up the game/cell state, initializes the input buffer, and prepares the UI\&.

.PP
\fBParameters\fP
.RS 4
\fImode\fP The game mode (PVE or PVP)\&. 
.RE
.PP

.PP
Definition at line \fB198\fP of file \fBgame\&.c\fP\&.
.PP
References \fBCellState::all\fP, \fBcell_select()\fP, \fBcell_state\fP, \fBCELLS_PER_COL\fP, \fBCELLS_PER_ROW\fP, \fBGameState::current_player\fP, \fBFIRST_ROUND\fP, \fBg_input_buf\fP, \fBgame_state\fP, \fBHIDE_CURSOR\fP, \fBinput_init()\fP, \fBCell::marked_by\fP, \fBNone\fP, \fBprint()\fP, \fBprint_clearConsole()\fP, \fBredrawField()\fP, \fBrng_init()\fP, \fBCellState::selected\fP, \fBstartingPlayer()\fP, \fBtime_init()\fP, and \fBui_printStartingPlayer()\fP\&.
.SS "static void redrawField ()\fR [static]\fP"

.PP
Refreshes the whole UI\&. Clears the console and redraws the game field and UI elements\&. 
.PP
Definition at line \fB275\fP of file \fBgame\&.c\fP\&.
.PP
References \fBCellState::all\fP, \fBcell_redrawAll()\fP, \fBcell_select()\fP, \fBcell_state\fP, \fBGameState::current_player\fP, \fBfield_redraw()\fP, \fBgame_state\fP, \fBprint_clearConsole()\fP, \fBREMAINING_TIME\fP, \fBGameState::round\fP, \fBCellState::selected\fP, \fBTICKS_PER_TURN\fP, \fBui_displayTimer()\fP, \fBui_displayTurn()\fP, and \fBui_printHeading()\fP\&.
.SS "static \fBPlayer\fP startingPlayer ()\fR [static]\fP"

.PP
Randomly determines the starting player\&. 
.PP
Definition at line \fB308\fP of file \fBgame\&.c\fP\&.
.PP
References \fBrng_getRandomValue_waiting()\fP\&.
.SH "Variable Documentation"
.PP 
.SS "\fBCellState\fP cell_state\fR [static]\fP"

.PP
\fBCellState\fP of the current game\&. 
.PP
Definition at line \fB40\fP of file \fBgame\&.c\fP\&.
.SS "volatile \fBbool\fP force_ui_update = \fBfalse\fP"

.PP
Force an update of the UI\&. 
.PP
Definition at line \fB36\fP of file \fBgame\&.c\fP\&.
.SS "\fBGameState\fP game_state\fR [static]\fP"

.PP
\fBGameState\fP of the current game\&. 
.PP
Definition at line \fB38\fP of file \fBgame\&.c\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for TikTakToe from the source code\&.
