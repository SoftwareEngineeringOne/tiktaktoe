.TH "util/input_buf.c" 3 "Wed Mar 12 2025 14:09:10" "Version 1.0.0" "TikTakToe" \" -*- nroff -*-
.ad l
.nh
.SH NAME
util/input_buf.c
.SH SYNOPSIS
.br
.PP
\fR#include 'util/input_buf\&.h'\fP
.br
\fR#include 'presentation/print\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "static \fBbool\fP \fBputIntoBuf\fP (volatile \fBInputBuffer\fP *ib, const uint8_t byte)"
.br
.RI "Put the next byte into the buffer\&. "
.ti -1c
.RI "void \fBinput_onInterrupt\fP (const uint8_t input)"
.br
.RI "Function to call in case of UART input interrupt\&. "
.ti -1c
.RI "void \fBinput_init\fP (volatile \fBInputBuffer\fP *ib)"
.br
.RI "Initialize the given \fBInputBuffer\fP\&. "
.ti -1c
.RI "\fBbool\fP \fBinput_isEmpty\fP (const volatile \fBInputBuffer\fP *ib)"
.br
.RI "Check if the buffer is empty\&. "
.ti -1c
.RI "\fBbool\fP \fBinput_isFull\fP (const volatile \fBInputBuffer\fP *ib)"
.br
.RI "Check if the buffer is full\&. "
.ti -1c
.RI "\fBbool\fP \fBinput_getNext\fP (volatile \fBInputBuffer\fP *ib, uint8_t *byte)"
.br
.RI "Get the next byte from the buffer\&. "
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "volatile \fBInputBuffer\fP \fBg_input_buf\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.PP
\fBAuthor\fP
.RS 4

.RE
.PP
\fBDate\fP
.RS 4
.RE
.PP
\fBSee also\fP
.RS 4
.RE
.PP
\fBCopyright\fP
.RS 4
This Source Code Form is subject to the terms of the Mozilla Public License, v2\&.0\&. If a copy of the MPL was not distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/\&. 
.RE
.PP

.PP
Definition in file \fBinput_buf\&.c\fP\&.
.SH "Function Documentation"
.PP 
.SS "\fBbool\fP input_getNext (volatile \fBInputBuffer\fP * ib, uint8_t * byte)"

.PP
Get the next byte from the buffer\&. 
.PP
\fBParameters\fP
.RS 4
\fIib\fP \fBInputBuffer\fP 
.br
\fIbyte\fP Next Byte 
.RE
.PP
\fBReturns\fP
.RS 4
False if empty 
.RE
.PP

.PP
Definition at line \fB51\fP of file \fBinput_buf\&.c\fP\&.
.PP
References \fBInputBuffer::data\fP, \fBINPUT_BUF_SIZE\fP, \fBinput_isEmpty()\fP, and \fBInputBuffer::tail\fP\&.
.SS "void input_init (volatile \fBInputBuffer\fP * ib)"

.PP
Initialize the given \fBInputBuffer\fP\&. 
.PP
\fBParameters\fP
.RS 4
\fIib\fP \fBInputBuffer\fP 
.RE
.PP

.PP
Definition at line \fB35\fP of file \fBinput_buf\&.c\fP\&.
.PP
References \fBInputBuffer::head\fP, and \fBInputBuffer::tail\fP\&.
.SS "\fBbool\fP input_isEmpty (const volatile \fBInputBuffer\fP * ib)"

.PP
Check if the buffer is empty\&. 
.PP
\fBParameters\fP
.RS 4
\fIib\fP \fBInputBuffer\fP 
.RE
.PP
\fBReturns\fP
.RS 4
True if empty 
.RE
.PP

.PP
Definition at line \fB41\fP of file \fBinput_buf\&.c\fP\&.
.PP
References \fBInputBuffer::head\fP, and \fBInputBuffer::tail\fP\&.
.SS "\fBbool\fP input_isFull (const volatile \fBInputBuffer\fP * ib)"

.PP
Check if the buffer is full\&. 
.PP
\fBParameters\fP
.RS 4
\fIib\fP \fBInputBuffer\fP 
.RE
.PP
\fBReturns\fP
.RS 4
True if full 
.RE
.PP

.PP
Definition at line \fB46\fP of file \fBinput_buf\&.c\fP\&.
.PP
References \fBInputBuffer::head\fP, \fBINPUT_BUF_SIZE\fP, and \fBInputBuffer::tail\fP\&.
.SS "void input_onInterrupt (uint8_t input)"

.PP
Function to call in case of UART input interrupt\&. 
.PP
\fBParameters\fP
.RS 4
\fIinput\fP Pure input from UART 
.RE
.PP
TODO Handle error better
.PP
Definition at line \fB26\fP of file \fBinput_buf\&.c\fP\&.
.PP
References \fBg_input_buf\fP, \fBprint()\fP, and \fBputIntoBuf()\fP\&.
.SS "\fBbool\fP putIntoBuf (volatile \fBInputBuffer\fP * ib, const uint8_t byte)\fR [static]\fP"

.PP
Put the next byte into the buffer\&. 
.PP
\fBParameters\fP
.RS 4
\fIib\fP \fBInputBuffer\fP 
.br
\fIbyte\fP Next Byte 
.RE
.PP
\fBReturns\fP
.RS 4
False if full 
.RE
.PP

.PP
Definition at line \fB70\fP of file \fBinput_buf\&.c\fP\&.
.PP
References \fBInputBuffer::data\fP, \fBInputBuffer::head\fP, \fBINPUT_BUF_SIZE\fP, and \fBinput_isFull()\fP\&.
.SH "Variable Documentation"
.PP 
.SS "volatile \fBInputBuffer\fP g_input_buf"

.PP
Definition at line \fB22\fP of file \fBinput_buf\&.c\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for TikTakToe from the source code\&.
