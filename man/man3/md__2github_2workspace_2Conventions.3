.TH "md__2github_2workspace_2Conventions" 3 "TikTakToe" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md__2github_2workspace_2Conventions \- ü§ù Coding Conventions 
.PP


.PP

.PP
.IP "\(bu" 2
\fRConventional Commits\fP
.PP
.SH "üìÑ File structure"
.PP
All files should follow a common structure as defined below\&. Exceptions may be made, however these should be explicitely explained\&.
.SS "Header file structure"
.IP "1." 4
Module comment
.IP "2." 4
Defines
.IP "3." 4
Global constants
.IP "4." 4
Global variables
.IP "5." 4
Structs
.IP "6." 4
Public function prototypes
.PP
.SS "Source file structure"
.IP "1." 4
Module comment (may reference header comment and add information if needed)
.IP "2." 4
Module constants
.IP "3." 4
Module variables
.IP "4." 4
Private function prototypes
.IP "5." 4
Public function implementations
.IP "6." 4
Private function implementations
.PP
.SH "üí¨ Naming"
.PP
.SS "Files"
.IP "\(bu" 2
Files should use \fRsnake_case\fP naming
.PP
.SS "Functions"
.IP "\(bu" 2
Public functions should be prefixed with '`module_[\&.\&.\&.]`'
.IP "\(bu" 2
Private functions should be marked as \fRstatic\fP and prefixed with '`_[\&.\&.\&.]`'
.IP "\(bu" 2
The function name itself should be written in \fRcamelCase\fP
.IP "\(bu" 2
A specialization may follow as a suffix, such as '`[\&.\&.\&.]_waiting`'
.PP
.SS "Variables"
.IP "\(bu" 2
All variables should use \fRsnake_case\fP naming
.IP "\(bu" 2
Global variables should be prefixed with \fRg_[\&.\&.\&.]\fP
.PP
.SS "Macros"
.IP "\(bu" 2
Function macros should use the same naming as functions
.IP "\(bu" 2
Other macros should use \fRSCREAMING_CASE\fP naming
.PP
.SH "üìù Documentation"
.PP
.IP "\(bu" 2
All files should contain a top level comment\&.
.IP "\(bu" 2
All public functions should be documented in the header file\&.
.IP "\(bu" 2
All private functions should be documented at the definition in the source files\&.
.IP "\(bu" 2
All structs and enums should be documented\&.
.IP "\(bu" 2
All global variables should be documented\&.
.IP "\(bu" 2
All 'complicated' macros should be documented\&.
.IP "\(bu" 2
All typedefs should be documented\&.
.PP
.SS "Documentation templates"
To ensure a uniform documentation all doc comments, should be loosely based on the following templates\&. Irrelevant fields can and should be ommited to avoid bloat\&.

.PP

.PP
.IP "\(bu" 2
\fB Files \fP

.PP
.PP
.nf
/**
 * @file  [File name]
 *
 * @brief [Brief description]
 *
 * @details
 * This file contains [\&.\&.\&.]\&.
 *
 * @ingroup [HAL/Logic/Presentation/Utility]
 *
 * @see 
 *  [Header/Source]
 *  [Any other relevant]
 *
 * @note
 *  [Additional notes, if relevant\&.\&.\&.]
 *
 * @copyright
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v2\&.0\&. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla\&.org/MPL/2\&.0/\&.
 */
.fi
.PP

.IP "\(bu" 2
\fB Functions \fP

.PP
.PP
.nf
/**
 * @brief [Brief description]
 *
 * @details 
 * [Detailed description, only if relevant]
 * 
 * @param[in/out/inout] param1 Description of paramater
 * \&.\&.\&.
 *
 * @return [Description of return value, or "void"]
 *
 * @note [Any additional notes or constraints, if relevant\&.]
 */
void example_function(uint8_t param1);
.fi
.PP

.IP "\(bu" 2
\fB Structs \fP

.PP
.PP
.nf
/**
 * @brief [Brief description]
 *
 * @details 
 * [Detailed description, only if relevant]
 *
 * @note [Any additional notes or constraints, if relevant\&.]
 */
typedef struct {
    int member1; /**< [Description of member1] */
    float member2; /**< [Description of member2] */
    // \&.\&.\&.
} ExampleStruct;
.fi
.PP

.IP "\(bu" 2
\fB Enums \fP

.PP
.PP
.nf
/**
 * @brief [Brief description]
 *
 * @details 
 * [Detailed description, only if relevant]
 *
 * @note [Any additional notes or constraints, if relevant\&.]
 */
typedef enum {
    ENUM_VALUE1; /**< [Description of ENUM_VALUE1] */
    ENUM_VALUE2; /**< [Description of ENUM_VALUE2] */
    ENUM_VALUE3; /**< [Description of ENUM_VALUE3] */
    // \&.\&.\&.
} ExampleEnum;
.fi
.PP

.IP "\(bu" 2
\fB Typedefs \fP

.PP
.PP
.nf
/**
 * @brief [Brief description]
 *
 * @details 
 * [Detailed description, only if relevant]
 *
 * @note [Any additional notes or constraints, if relevant\&.]
 */
typedef unsigned long ExampleType;
.fi
.PP

.IP "\(bu" 2
\fB Macros \fP

.PP
.PP
.nf
/**
 * @def EXAMPLE_MACRO
 * @brief [Short description of what the macro does or represents\&.]
 *
 * @details
 * [If neccessary, explain the purpose of the macro, 
 *  parameters (if function\-like macro),\&.\&.\&.]
 *
 * @note [Any additional notes or constraints, if relevant\&.]
 *
 * Example: [if relevant]
 * @code
 *   int value = MY_MACRO;
 * @endcode
 */
#define EXAMPLE_MACRO 42
.fi
.PP

.IP "\(bu" 2
\fB Global Variables \fP

.PP
.PP
.nf
/**
 * @brief [Brief description]
 *
 * @details 
 * [What global variable is used for, scope, and initialization details\&.]
 *
 * @note [Any additional notes or constraints, if relevant\&.]
 */
extern int g_exampleGlobal;
.fi
.PP
 
.PP
 
